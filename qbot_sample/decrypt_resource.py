import hashlib
from arc4 import ARC4
import binascii
import pefile


def extract_resource(pe):

    for resource in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        for entry in resource.directory.entries:
            # print(entry.name)
            rsrc_size = entry.directory.entries[0].data.struct.Size
            # print(rsrc_size)

            if rsrc_size == 130118:
                rsrc_offset = entry.directory.entries[0].data.struct.OffsetToData
                # print(rsrc_offset)
                rsrc_data = pe.get_memory_mapped_image()[rsrc_offset: rsrc_offset + rsrc_size]
                return rsrc_data


def arc4_decrypt(encrypted_text, key):
    arc = ARC4(key)
    decrypted_text = arc.decrypt(encrypted_text)
    return decrypted_text[:20], decrypted_text[20:]


# with open('resource_307.dump', 'rb') as f:
    # encrypted_text = f.read()
    # key = encrypted_text[:20]
    # encrypted_text = encrypted_text[20:]
    # sha1_sum, decrypted_text = arc4_decrypt(encrypted_text, key)
    # print(binascii.hexlify(sha1_sum))
    # print(hashlib.sha1(decrypted_text).hexdigest())


def main():
    pe = pefile.PE('quackbot_unpacked.bin')
    rsrc_data = extract_resource(pe)
    # print(binascii.hexlify(rsrc_data))
    sha1, decrypted_rsrc = arc4_decrypt(rsrc_data[20:], rsrc_data[:20])

    print(binascii.hexlify(decrypted_rsrc))


if __name__ == '__main__':
    main()